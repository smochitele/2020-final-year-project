#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LiveSSH
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SSH_DB")]
	public partial class DatabaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDB_Address(DB_Address instance);
    partial void UpdateDB_Address(DB_Address instance);
    partial void DeleteDB_Address(DB_Address instance);
    partial void InsertDB_Alert(DB_Alert instance);
    partial void UpdateDB_Alert(DB_Alert instance);
    partial void DeleteDB_Alert(DB_Alert instance);
    partial void InsertDB_House(DB_House instance);
    partial void UpdateDB_House(DB_House instance);
    partial void DeleteDB_House(DB_House instance);
    partial void InsertDB_HouseOccupant(DB_HouseOccupant instance);
    partial void UpdateDB_HouseOccupant(DB_HouseOccupant instance);
    partial void DeleteDB_HouseOccupant(DB_HouseOccupant instance);
    partial void InsertDB_HouseOwner(DB_HouseOwner instance);
    partial void UpdateDB_HouseOwner(DB_HouseOwner instance);
    partial void DeleteDB_HouseOwner(DB_HouseOwner instance);
    partial void InsertDB_Package(DB_Package instance);
    partial void UpdateDB_Package(DB_Package instance);
    partial void DeleteDB_Package(DB_Package instance);
    partial void InsertDB_Respondent(DB_Respondent instance);
    partial void UpdateDB_Respondent(DB_Respondent instance);
    partial void DeleteDB_Respondent(DB_Respondent instance);
    partial void InsertDB_User(DB_User instance);
    partial void UpdateDB_User(DB_User instance);
    partial void DeleteDB_User(DB_User instance);
    partial void InsertDB_Case(DB_Case instance);
    partial void UpdateDB_Case(DB_Case instance);
    partial void DeleteDB_Case(DB_Case instance);
    #endregion
		
		public DatabaseDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["SSH_DBConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<DB_Address> DB_Addresses
		{
			get
			{
				return this.GetTable<DB_Address>();
			}
		}
		
		public System.Data.Linq.Table<DB_Alert> DB_Alerts
		{
			get
			{
				return this.GetTable<DB_Alert>();
			}
		}
		
		public System.Data.Linq.Table<DB_House> DB_Houses
		{
			get
			{
				return this.GetTable<DB_House>();
			}
		}
		
		public System.Data.Linq.Table<DB_HouseOccupant> DB_HouseOccupants
		{
			get
			{
				return this.GetTable<DB_HouseOccupant>();
			}
		}
		
		public System.Data.Linq.Table<DB_HouseOwner> DB_HouseOwners
		{
			get
			{
				return this.GetTable<DB_HouseOwner>();
			}
		}
		
		public System.Data.Linq.Table<DB_Package> DB_Packages
		{
			get
			{
				return this.GetTable<DB_Package>();
			}
		}
		
		public System.Data.Linq.Table<DB_Respondent> DB_Respondents
		{
			get
			{
				return this.GetTable<DB_Respondent>();
			}
		}
		
		public System.Data.Linq.Table<DB_User> DB_Users
		{
			get
			{
				return this.GetTable<DB_User>();
			}
		}
		
		public System.Data.Linq.Table<DB_Case> DB_Cases
		{
			get
			{
				return this.GetTable<DB_Case>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DB_Address")]
	public partial class DB_Address : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Province;
		
		private string _City;
		
		private string _Surburb;
		
		private string _StreetName;
		
		private string _HouseNo;
		
		private string _ZIPCode;
		
		private string _Longitute;
		
		private string _Lattitute;
		
		private System.Nullable<int> _HouseID;
		
		private EntityRef<DB_House> _DB_House;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnProvinceChanging(string value);
    partial void OnProvinceChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnSurburbChanging(string value);
    partial void OnSurburbChanged();
    partial void OnStreetNameChanging(string value);
    partial void OnStreetNameChanged();
    partial void OnHouseNoChanging(string value);
    partial void OnHouseNoChanged();
    partial void OnZIPCodeChanging(string value);
    partial void OnZIPCodeChanged();
    partial void OnLongituteChanging(string value);
    partial void OnLongituteChanged();
    partial void OnLattituteChanging(string value);
    partial void OnLattituteChanged();
    partial void OnHouseIDChanging(System.Nullable<int> value);
    partial void OnHouseIDChanged();
    #endregion
		
		public DB_Address()
		{
			this._DB_House = default(EntityRef<DB_House>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Province", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string Province
		{
			get
			{
				return this._Province;
			}
			set
			{
				if ((this._Province != value))
				{
					this.OnProvinceChanging(value);
					this.SendPropertyChanging();
					this._Province = value;
					this.SendPropertyChanged("Province");
					this.OnProvinceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surburb", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string Surburb
		{
			get
			{
				return this._Surburb;
			}
			set
			{
				if ((this._Surburb != value))
				{
					this.OnSurburbChanging(value);
					this.SendPropertyChanging();
					this._Surburb = value;
					this.SendPropertyChanged("Surburb");
					this.OnSurburbChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StreetName", DbType="VarChar(25)")]
		public string StreetName
		{
			get
			{
				return this._StreetName;
			}
			set
			{
				if ((this._StreetName != value))
				{
					this.OnStreetNameChanging(value);
					this.SendPropertyChanging();
					this._StreetName = value;
					this.SendPropertyChanged("StreetName");
					this.OnStreetNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HouseNo", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string HouseNo
		{
			get
			{
				return this._HouseNo;
			}
			set
			{
				if ((this._HouseNo != value))
				{
					this.OnHouseNoChanging(value);
					this.SendPropertyChanging();
					this._HouseNo = value;
					this.SendPropertyChanged("HouseNo");
					this.OnHouseNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZIPCode", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string ZIPCode
		{
			get
			{
				return this._ZIPCode;
			}
			set
			{
				if ((this._ZIPCode != value))
				{
					this.OnZIPCodeChanging(value);
					this.SendPropertyChanging();
					this._ZIPCode = value;
					this.SendPropertyChanged("ZIPCode");
					this.OnZIPCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Longitute", DbType="VarChar(25)")]
		public string Longitute
		{
			get
			{
				return this._Longitute;
			}
			set
			{
				if ((this._Longitute != value))
				{
					this.OnLongituteChanging(value);
					this.SendPropertyChanging();
					this._Longitute = value;
					this.SendPropertyChanged("Longitute");
					this.OnLongituteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lattitute", DbType="VarChar(25)")]
		public string Lattitute
		{
			get
			{
				return this._Lattitute;
			}
			set
			{
				if ((this._Lattitute != value))
				{
					this.OnLattituteChanging(value);
					this.SendPropertyChanging();
					this._Lattitute = value;
					this.SendPropertyChanged("Lattitute");
					this.OnLattituteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HouseID", DbType="Int")]
		public System.Nullable<int> HouseID
		{
			get
			{
				return this._HouseID;
			}
			set
			{
				if ((this._HouseID != value))
				{
					if (this._DB_House.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHouseIDChanging(value);
					this.SendPropertyChanging();
					this._HouseID = value;
					this.SendPropertyChanged("HouseID");
					this.OnHouseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_House_DB_Address", Storage="_DB_House", ThisKey="HouseID", OtherKey="HouseID", IsForeignKey=true)]
		public DB_House DB_House
		{
			get
			{
				return this._DB_House.Entity;
			}
			set
			{
				DB_House previousValue = this._DB_House.Entity;
				if (((previousValue != value) 
							|| (this._DB_House.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DB_House.Entity = null;
						previousValue.DB_Addresses.Remove(this);
					}
					this._DB_House.Entity = value;
					if ((value != null))
					{
						value.DB_Addresses.Add(this);
						this._HouseID = value.HouseID;
					}
					else
					{
						this._HouseID = default(Nullable<int>);
					}
					this.SendPropertyChanged("DB_House");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DB_Alert")]
	public partial class DB_Alert : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AlertID;
		
		private System.DateTime _Date;
		
		private int _IsFalseAlarm;
		
		private int _AlartMethod;
		
		private int _HouseID;
		
		private System.Nullable<int> _Status;
		
		private string _OccupantID;
		
		private string _RespondentID;
		
		private EntityRef<DB_House> _DB_House;
		
		private EntityRef<DB_User> _DB_User;
		
		private EntityRef<DB_User> _DB_User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAlertIDChanging(int value);
    partial void OnAlertIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnIsFalseAlarmChanging(int value);
    partial void OnIsFalseAlarmChanged();
    partial void OnAlartMethodChanging(int value);
    partial void OnAlartMethodChanged();
    partial void OnHouseIDChanging(int value);
    partial void OnHouseIDChanged();
    partial void OnStatusChanging(System.Nullable<int> value);
    partial void OnStatusChanged();
    partial void OnOccupantIDChanging(string value);
    partial void OnOccupantIDChanged();
    partial void OnRespondentIDChanging(string value);
    partial void OnRespondentIDChanged();
    #endregion
		
		public DB_Alert()
		{
			this._DB_House = default(EntityRef<DB_House>);
			this._DB_User = default(EntityRef<DB_User>);
			this._DB_User1 = default(EntityRef<DB_User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlertID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AlertID
		{
			get
			{
				return this._AlertID;
			}
			set
			{
				if ((this._AlertID != value))
				{
					this.OnAlertIDChanging(value);
					this.SendPropertyChanging();
					this._AlertID = value;
					this.SendPropertyChanged("AlertID");
					this.OnAlertIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsFalseAlarm", DbType="Int NOT NULL")]
		public int IsFalseAlarm
		{
			get
			{
				return this._IsFalseAlarm;
			}
			set
			{
				if ((this._IsFalseAlarm != value))
				{
					this.OnIsFalseAlarmChanging(value);
					this.SendPropertyChanging();
					this._IsFalseAlarm = value;
					this.SendPropertyChanged("IsFalseAlarm");
					this.OnIsFalseAlarmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlartMethod", DbType="Int NOT NULL")]
		public int AlartMethod
		{
			get
			{
				return this._AlartMethod;
			}
			set
			{
				if ((this._AlartMethod != value))
				{
					this.OnAlartMethodChanging(value);
					this.SendPropertyChanging();
					this._AlartMethod = value;
					this.SendPropertyChanged("AlartMethod");
					this.OnAlartMethodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HouseID", DbType="Int NOT NULL")]
		public int HouseID
		{
			get
			{
				return this._HouseID;
			}
			set
			{
				if ((this._HouseID != value))
				{
					if (this._DB_House.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHouseIDChanging(value);
					this.SendPropertyChanging();
					this._HouseID = value;
					this.SendPropertyChanged("HouseID");
					this.OnHouseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int")]
		public System.Nullable<int> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OccupantID", DbType="VarChar(25)")]
		public string OccupantID
		{
			get
			{
				return this._OccupantID;
			}
			set
			{
				if ((this._OccupantID != value))
				{
					if (this._DB_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOccupantIDChanging(value);
					this.SendPropertyChanging();
					this._OccupantID = value;
					this.SendPropertyChanged("OccupantID");
					this.OnOccupantIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RespondentID", DbType="VarChar(25)")]
		public string RespondentID
		{
			get
			{
				return this._RespondentID;
			}
			set
			{
				if ((this._RespondentID != value))
				{
					if (this._DB_User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRespondentIDChanging(value);
					this.SendPropertyChanging();
					this._RespondentID = value;
					this.SendPropertyChanged("RespondentID");
					this.OnRespondentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_House_DB_Alert", Storage="_DB_House", ThisKey="HouseID", OtherKey="HouseID", IsForeignKey=true)]
		public DB_House DB_House
		{
			get
			{
				return this._DB_House.Entity;
			}
			set
			{
				DB_House previousValue = this._DB_House.Entity;
				if (((previousValue != value) 
							|| (this._DB_House.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DB_House.Entity = null;
						previousValue.DB_Alerts.Remove(this);
					}
					this._DB_House.Entity = value;
					if ((value != null))
					{
						value.DB_Alerts.Add(this);
						this._HouseID = value.HouseID;
					}
					else
					{
						this._HouseID = default(int);
					}
					this.SendPropertyChanged("DB_House");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_User_DB_Alert", Storage="_DB_User", ThisKey="OccupantID", OtherKey="ID", IsForeignKey=true)]
		public DB_User DB_User
		{
			get
			{
				return this._DB_User.Entity;
			}
			set
			{
				DB_User previousValue = this._DB_User.Entity;
				if (((previousValue != value) 
							|| (this._DB_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DB_User.Entity = null;
						previousValue.DB_Alerts.Remove(this);
					}
					this._DB_User.Entity = value;
					if ((value != null))
					{
						value.DB_Alerts.Add(this);
						this._OccupantID = value.ID;
					}
					else
					{
						this._OccupantID = default(string);
					}
					this.SendPropertyChanged("DB_User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_User_DB_Alert1", Storage="_DB_User1", ThisKey="RespondentID", OtherKey="ID", IsForeignKey=true)]
		public DB_User DB_User1
		{
			get
			{
				return this._DB_User1.Entity;
			}
			set
			{
				DB_User previousValue = this._DB_User1.Entity;
				if (((previousValue != value) 
							|| (this._DB_User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DB_User1.Entity = null;
						previousValue.DB_Alerts1.Remove(this);
					}
					this._DB_User1.Entity = value;
					if ((value != null))
					{
						value.DB_Alerts1.Add(this);
						this._RespondentID = value.ID;
					}
					else
					{
						this._RespondentID = default(string);
					}
					this.SendPropertyChanged("DB_User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DB_House")]
	public partial class DB_House : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _HouseID;
		
		private int _AlarmStatus;
		
		private string _OwnerID;
		
		private EntitySet<DB_Address> _DB_Addresses;
		
		private EntitySet<DB_Alert> _DB_Alerts;
		
		private EntitySet<DB_Case> _DB_Cases;
		
		private EntityRef<DB_HouseOwner> _DB_HouseOwner;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHouseIDChanging(int value);
    partial void OnHouseIDChanged();
    partial void OnAlarmStatusChanging(int value);
    partial void OnAlarmStatusChanged();
    partial void OnOwnerIDChanging(string value);
    partial void OnOwnerIDChanged();
    #endregion
		
		public DB_House()
		{
			this._DB_Addresses = new EntitySet<DB_Address>(new Action<DB_Address>(this.attach_DB_Addresses), new Action<DB_Address>(this.detach_DB_Addresses));
			this._DB_Alerts = new EntitySet<DB_Alert>(new Action<DB_Alert>(this.attach_DB_Alerts), new Action<DB_Alert>(this.detach_DB_Alerts));
			this._DB_Cases = new EntitySet<DB_Case>(new Action<DB_Case>(this.attach_DB_Cases), new Action<DB_Case>(this.detach_DB_Cases));
			this._DB_HouseOwner = default(EntityRef<DB_HouseOwner>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HouseID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int HouseID
		{
			get
			{
				return this._HouseID;
			}
			set
			{
				if ((this._HouseID != value))
				{
					this.OnHouseIDChanging(value);
					this.SendPropertyChanging();
					this._HouseID = value;
					this.SendPropertyChanged("HouseID");
					this.OnHouseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlarmStatus", DbType="Int NOT NULL")]
		public int AlarmStatus
		{
			get
			{
				return this._AlarmStatus;
			}
			set
			{
				if ((this._AlarmStatus != value))
				{
					this.OnAlarmStatusChanging(value);
					this.SendPropertyChanging();
					this._AlarmStatus = value;
					this.SendPropertyChanged("AlarmStatus");
					this.OnAlarmStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerID", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string OwnerID
		{
			get
			{
				return this._OwnerID;
			}
			set
			{
				if ((this._OwnerID != value))
				{
					if (this._DB_HouseOwner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerID = value;
					this.SendPropertyChanged("OwnerID");
					this.OnOwnerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_House_DB_Address", Storage="_DB_Addresses", ThisKey="HouseID", OtherKey="HouseID")]
		public EntitySet<DB_Address> DB_Addresses
		{
			get
			{
				return this._DB_Addresses;
			}
			set
			{
				this._DB_Addresses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_House_DB_Alert", Storage="_DB_Alerts", ThisKey="HouseID", OtherKey="HouseID")]
		public EntitySet<DB_Alert> DB_Alerts
		{
			get
			{
				return this._DB_Alerts;
			}
			set
			{
				this._DB_Alerts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_House_DB_Case", Storage="_DB_Cases", ThisKey="HouseID", OtherKey="HouseID")]
		public EntitySet<DB_Case> DB_Cases
		{
			get
			{
				return this._DB_Cases;
			}
			set
			{
				this._DB_Cases.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_HouseOwner_DB_House", Storage="_DB_HouseOwner", ThisKey="OwnerID", OtherKey="ID", IsForeignKey=true)]
		public DB_HouseOwner DB_HouseOwner
		{
			get
			{
				return this._DB_HouseOwner.Entity;
			}
			set
			{
				DB_HouseOwner previousValue = this._DB_HouseOwner.Entity;
				if (((previousValue != value) 
							|| (this._DB_HouseOwner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DB_HouseOwner.Entity = null;
						previousValue.DB_Houses.Remove(this);
					}
					this._DB_HouseOwner.Entity = value;
					if ((value != null))
					{
						value.DB_Houses.Add(this);
						this._OwnerID = value.ID;
					}
					else
					{
						this._OwnerID = default(string);
					}
					this.SendPropertyChanged("DB_HouseOwner");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DB_Addresses(DB_Address entity)
		{
			this.SendPropertyChanging();
			entity.DB_House = this;
		}
		
		private void detach_DB_Addresses(DB_Address entity)
		{
			this.SendPropertyChanging();
			entity.DB_House = null;
		}
		
		private void attach_DB_Alerts(DB_Alert entity)
		{
			this.SendPropertyChanging();
			entity.DB_House = this;
		}
		
		private void detach_DB_Alerts(DB_Alert entity)
		{
			this.SendPropertyChanging();
			entity.DB_House = null;
		}
		
		private void attach_DB_Cases(DB_Case entity)
		{
			this.SendPropertyChanging();
			entity.DB_House = this;
		}
		
		private void detach_DB_Cases(DB_Case entity)
		{
			this.SendPropertyChanging();
			entity.DB_House = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DB_HouseOccupant")]
	public partial class DB_HouseOccupant : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _HouseOwnerID;
		
		private EntityRef<DB_HouseOwner> _DB_HouseOwner;
		
		private EntityRef<DB_User> _DB_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnHouseOwnerIDChanging(string value);
    partial void OnHouseOwnerIDChanged();
    #endregion
		
		public DB_HouseOccupant()
		{
			this._DB_HouseOwner = default(EntityRef<DB_HouseOwner>);
			this._DB_User = default(EntityRef<DB_User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="VarChar(25) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					if (this._DB_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HouseOwnerID", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string HouseOwnerID
		{
			get
			{
				return this._HouseOwnerID;
			}
			set
			{
				if ((this._HouseOwnerID != value))
				{
					if (this._DB_HouseOwner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHouseOwnerIDChanging(value);
					this.SendPropertyChanging();
					this._HouseOwnerID = value;
					this.SendPropertyChanged("HouseOwnerID");
					this.OnHouseOwnerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_HouseOwner_DB_HouseOccupant", Storage="_DB_HouseOwner", ThisKey="HouseOwnerID", OtherKey="ID", IsForeignKey=true)]
		public DB_HouseOwner DB_HouseOwner
		{
			get
			{
				return this._DB_HouseOwner.Entity;
			}
			set
			{
				DB_HouseOwner previousValue = this._DB_HouseOwner.Entity;
				if (((previousValue != value) 
							|| (this._DB_HouseOwner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DB_HouseOwner.Entity = null;
						previousValue.DB_HouseOccupants.Remove(this);
					}
					this._DB_HouseOwner.Entity = value;
					if ((value != null))
					{
						value.DB_HouseOccupants.Add(this);
						this._HouseOwnerID = value.ID;
					}
					else
					{
						this._HouseOwnerID = default(string);
					}
					this.SendPropertyChanged("DB_HouseOwner");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_User_DB_HouseOccupant", Storage="_DB_User", ThisKey="ID", OtherKey="ID", IsForeignKey=true)]
		public DB_User DB_User
		{
			get
			{
				return this._DB_User.Entity;
			}
			set
			{
				DB_User previousValue = this._DB_User.Entity;
				if (((previousValue != value) 
							|| (this._DB_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DB_User.Entity = null;
						previousValue.DB_HouseOccupant = null;
					}
					this._DB_User.Entity = value;
					if ((value != null))
					{
						value.DB_HouseOccupant = this;
						this._ID = value.ID;
					}
					else
					{
						this._ID = default(string);
					}
					this.SendPropertyChanged("DB_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DB_HouseOwner")]
	public partial class DB_HouseOwner : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private System.Nullable<int> _PackageID;
		
		private EntitySet<DB_House> _DB_Houses;
		
		private EntitySet<DB_HouseOccupant> _DB_HouseOccupants;
		
		private EntityRef<DB_Package> _DB_Package;
		
		private EntityRef<DB_User> _DB_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnPackageIDChanging(System.Nullable<int> value);
    partial void OnPackageIDChanged();
    #endregion
		
		public DB_HouseOwner()
		{
			this._DB_Houses = new EntitySet<DB_House>(new Action<DB_House>(this.attach_DB_Houses), new Action<DB_House>(this.detach_DB_Houses));
			this._DB_HouseOccupants = new EntitySet<DB_HouseOccupant>(new Action<DB_HouseOccupant>(this.attach_DB_HouseOccupants), new Action<DB_HouseOccupant>(this.detach_DB_HouseOccupants));
			this._DB_Package = default(EntityRef<DB_Package>);
			this._DB_User = default(EntityRef<DB_User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="VarChar(25) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					if (this._DB_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PackageID", DbType="Int")]
		public System.Nullable<int> PackageID
		{
			get
			{
				return this._PackageID;
			}
			set
			{
				if ((this._PackageID != value))
				{
					if (this._DB_Package.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPackageIDChanging(value);
					this.SendPropertyChanging();
					this._PackageID = value;
					this.SendPropertyChanged("PackageID");
					this.OnPackageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_HouseOwner_DB_House", Storage="_DB_Houses", ThisKey="ID", OtherKey="OwnerID")]
		public EntitySet<DB_House> DB_Houses
		{
			get
			{
				return this._DB_Houses;
			}
			set
			{
				this._DB_Houses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_HouseOwner_DB_HouseOccupant", Storage="_DB_HouseOccupants", ThisKey="ID", OtherKey="HouseOwnerID")]
		public EntitySet<DB_HouseOccupant> DB_HouseOccupants
		{
			get
			{
				return this._DB_HouseOccupants;
			}
			set
			{
				this._DB_HouseOccupants.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_Package_DB_HouseOwner", Storage="_DB_Package", ThisKey="PackageID", OtherKey="PackageID", IsForeignKey=true)]
		public DB_Package DB_Package
		{
			get
			{
				return this._DB_Package.Entity;
			}
			set
			{
				DB_Package previousValue = this._DB_Package.Entity;
				if (((previousValue != value) 
							|| (this._DB_Package.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DB_Package.Entity = null;
						previousValue.DB_HouseOwners.Remove(this);
					}
					this._DB_Package.Entity = value;
					if ((value != null))
					{
						value.DB_HouseOwners.Add(this);
						this._PackageID = value.PackageID;
					}
					else
					{
						this._PackageID = default(Nullable<int>);
					}
					this.SendPropertyChanged("DB_Package");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_User_DB_HouseOwner", Storage="_DB_User", ThisKey="ID", OtherKey="ID", IsForeignKey=true)]
		public DB_User DB_User
		{
			get
			{
				return this._DB_User.Entity;
			}
			set
			{
				DB_User previousValue = this._DB_User.Entity;
				if (((previousValue != value) 
							|| (this._DB_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DB_User.Entity = null;
						previousValue.DB_HouseOwner = null;
					}
					this._DB_User.Entity = value;
					if ((value != null))
					{
						value.DB_HouseOwner = this;
						this._ID = value.ID;
					}
					else
					{
						this._ID = default(string);
					}
					this.SendPropertyChanged("DB_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DB_Houses(DB_House entity)
		{
			this.SendPropertyChanging();
			entity.DB_HouseOwner = this;
		}
		
		private void detach_DB_Houses(DB_House entity)
		{
			this.SendPropertyChanging();
			entity.DB_HouseOwner = null;
		}
		
		private void attach_DB_HouseOccupants(DB_HouseOccupant entity)
		{
			this.SendPropertyChanging();
			entity.DB_HouseOwner = this;
		}
		
		private void detach_DB_HouseOccupants(DB_HouseOccupant entity)
		{
			this.SendPropertyChanging();
			entity.DB_HouseOwner = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DB_Package")]
	public partial class DB_Package : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PackageID;
		
		private string _Type;
		
		private string _Description;
		
		private decimal _Price;
		
		private EntitySet<DB_HouseOwner> _DB_HouseOwners;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPackageIDChanging(int value);
    partial void OnPackageIDChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    #endregion
		
		public DB_Package()
		{
			this._DB_HouseOwners = new EntitySet<DB_HouseOwner>(new Action<DB_HouseOwner>(this.attach_DB_HouseOwners), new Action<DB_HouseOwner>(this.detach_DB_HouseOwners));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PackageID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PackageID
		{
			get
			{
				return this._PackageID;
			}
			set
			{
				if ((this._PackageID != value))
				{
					this.OnPackageIDChanging(value);
					this.SendPropertyChanging();
					this._PackageID = value;
					this.SendPropertyChanged("PackageID");
					this.OnPackageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(225) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(225) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Decimal(18,0) NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_Package_DB_HouseOwner", Storage="_DB_HouseOwners", ThisKey="PackageID", OtherKey="PackageID")]
		public EntitySet<DB_HouseOwner> DB_HouseOwners
		{
			get
			{
				return this._DB_HouseOwners;
			}
			set
			{
				this._DB_HouseOwners.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DB_HouseOwners(DB_HouseOwner entity)
		{
			this.SendPropertyChanging();
			entity.DB_Package = this;
		}
		
		private void detach_DB_HouseOwners(DB_HouseOwner entity)
		{
			this.SendPropertyChanging();
			entity.DB_Package = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DB_Respondent")]
	public partial class DB_Respondent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _LastLattitute;
		
		private string _LastLongitute;
		
		private System.Nullable<int> _Status;
		
		private EntitySet<DB_Case> _DB_Cases;
		
		private EntityRef<DB_User> _DB_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnLastLattituteChanging(string value);
    partial void OnLastLattituteChanged();
    partial void OnLastLongituteChanging(string value);
    partial void OnLastLongituteChanged();
    partial void OnStatusChanging(System.Nullable<int> value);
    partial void OnStatusChanged();
    #endregion
		
		public DB_Respondent()
		{
			this._DB_Cases = new EntitySet<DB_Case>(new Action<DB_Case>(this.attach_DB_Cases), new Action<DB_Case>(this.detach_DB_Cases));
			this._DB_User = default(EntityRef<DB_User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="VarChar(25) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					if (this._DB_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastLattitute", DbType="VarChar(200)")]
		public string LastLattitute
		{
			get
			{
				return this._LastLattitute;
			}
			set
			{
				if ((this._LastLattitute != value))
				{
					this.OnLastLattituteChanging(value);
					this.SendPropertyChanging();
					this._LastLattitute = value;
					this.SendPropertyChanged("LastLattitute");
					this.OnLastLattituteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastLongitute", DbType="VarChar(200)")]
		public string LastLongitute
		{
			get
			{
				return this._LastLongitute;
			}
			set
			{
				if ((this._LastLongitute != value))
				{
					this.OnLastLongituteChanging(value);
					this.SendPropertyChanging();
					this._LastLongitute = value;
					this.SendPropertyChanged("LastLongitute");
					this.OnLastLongituteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int")]
		public System.Nullable<int> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_Respondent_DB_Case", Storage="_DB_Cases", ThisKey="ID", OtherKey="RespondentID")]
		public EntitySet<DB_Case> DB_Cases
		{
			get
			{
				return this._DB_Cases;
			}
			set
			{
				this._DB_Cases.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_User_DB_Respondent", Storage="_DB_User", ThisKey="ID", OtherKey="ID", IsForeignKey=true)]
		public DB_User DB_User
		{
			get
			{
				return this._DB_User.Entity;
			}
			set
			{
				DB_User previousValue = this._DB_User.Entity;
				if (((previousValue != value) 
							|| (this._DB_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DB_User.Entity = null;
						previousValue.DB_Respondent = null;
					}
					this._DB_User.Entity = value;
					if ((value != null))
					{
						value.DB_Respondent = this;
						this._ID = value.ID;
					}
					else
					{
						this._ID = default(string);
					}
					this.SendPropertyChanged("DB_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DB_Cases(DB_Case entity)
		{
			this.SendPropertyChanging();
			entity.DB_Respondent = this;
		}
		
		private void detach_DB_Cases(DB_Case entity)
		{
			this.SendPropertyChanging();
			entity.DB_Respondent = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DB_User")]
	public partial class DB_User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _Name;
		
		private string _Surname;
		
		private string _Email;
		
		private string _Password;
		
		private int _IsActive;
		
		private int _UserType;
		
		private System.DateTime _DateRegistered;
		
		private EntitySet<DB_Alert> _DB_Alerts;
		
		private EntitySet<DB_Alert> _DB_Alerts1;
		
		private EntityRef<DB_HouseOccupant> _DB_HouseOccupant;
		
		private EntityRef<DB_HouseOwner> _DB_HouseOwner;
		
		private EntityRef<DB_Respondent> _DB_Respondent;
		
		private EntitySet<DB_Case> _DB_Cases;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnIsActiveChanging(int value);
    partial void OnIsActiveChanged();
    partial void OnUserTypeChanging(int value);
    partial void OnUserTypeChanged();
    partial void OnDateRegisteredChanging(System.DateTime value);
    partial void OnDateRegisteredChanged();
    #endregion
		
		public DB_User()
		{
			this._DB_Alerts = new EntitySet<DB_Alert>(new Action<DB_Alert>(this.attach_DB_Alerts), new Action<DB_Alert>(this.detach_DB_Alerts));
			this._DB_Alerts1 = new EntitySet<DB_Alert>(new Action<DB_Alert>(this.attach_DB_Alerts1), new Action<DB_Alert>(this.detach_DB_Alerts1));
			this._DB_HouseOccupant = default(EntityRef<DB_HouseOccupant>);
			this._DB_HouseOwner = default(EntityRef<DB_HouseOwner>);
			this._DB_Respondent = default(EntityRef<DB_Respondent>);
			this._DB_Cases = new EntitySet<DB_Case>(new Action<DB_Case>(this.attach_DB_Cases), new Action<DB_Case>(this.detach_DB_Cases));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="VarChar(25) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Int NOT NULL")]
		public int IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserType", DbType="Int NOT NULL")]
		public int UserType
		{
			get
			{
				return this._UserType;
			}
			set
			{
				if ((this._UserType != value))
				{
					this.OnUserTypeChanging(value);
					this.SendPropertyChanging();
					this._UserType = value;
					this.SendPropertyChanged("UserType");
					this.OnUserTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateRegistered", DbType="Date NOT NULL")]
		public System.DateTime DateRegistered
		{
			get
			{
				return this._DateRegistered;
			}
			set
			{
				if ((this._DateRegistered != value))
				{
					this.OnDateRegisteredChanging(value);
					this.SendPropertyChanging();
					this._DateRegistered = value;
					this.SendPropertyChanged("DateRegistered");
					this.OnDateRegisteredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_User_DB_Alert", Storage="_DB_Alerts", ThisKey="ID", OtherKey="OccupantID")]
		public EntitySet<DB_Alert> DB_Alerts
		{
			get
			{
				return this._DB_Alerts;
			}
			set
			{
				this._DB_Alerts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_User_DB_Alert1", Storage="_DB_Alerts1", ThisKey="ID", OtherKey="RespondentID")]
		public EntitySet<DB_Alert> DB_Alerts1
		{
			get
			{
				return this._DB_Alerts1;
			}
			set
			{
				this._DB_Alerts1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_User_DB_HouseOccupant", Storage="_DB_HouseOccupant", ThisKey="ID", OtherKey="ID", IsUnique=true, IsForeignKey=false)]
		public DB_HouseOccupant DB_HouseOccupant
		{
			get
			{
				return this._DB_HouseOccupant.Entity;
			}
			set
			{
				DB_HouseOccupant previousValue = this._DB_HouseOccupant.Entity;
				if (((previousValue != value) 
							|| (this._DB_HouseOccupant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DB_HouseOccupant.Entity = null;
						previousValue.DB_User = null;
					}
					this._DB_HouseOccupant.Entity = value;
					if ((value != null))
					{
						value.DB_User = this;
					}
					this.SendPropertyChanged("DB_HouseOccupant");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_User_DB_HouseOwner", Storage="_DB_HouseOwner", ThisKey="ID", OtherKey="ID", IsUnique=true, IsForeignKey=false)]
		public DB_HouseOwner DB_HouseOwner
		{
			get
			{
				return this._DB_HouseOwner.Entity;
			}
			set
			{
				DB_HouseOwner previousValue = this._DB_HouseOwner.Entity;
				if (((previousValue != value) 
							|| (this._DB_HouseOwner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DB_HouseOwner.Entity = null;
						previousValue.DB_User = null;
					}
					this._DB_HouseOwner.Entity = value;
					if ((value != null))
					{
						value.DB_User = this;
					}
					this.SendPropertyChanged("DB_HouseOwner");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_User_DB_Respondent", Storage="_DB_Respondent", ThisKey="ID", OtherKey="ID", IsUnique=true, IsForeignKey=false)]
		public DB_Respondent DB_Respondent
		{
			get
			{
				return this._DB_Respondent.Entity;
			}
			set
			{
				DB_Respondent previousValue = this._DB_Respondent.Entity;
				if (((previousValue != value) 
							|| (this._DB_Respondent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DB_Respondent.Entity = null;
						previousValue.DB_User = null;
					}
					this._DB_Respondent.Entity = value;
					if ((value != null))
					{
						value.DB_User = this;
					}
					this.SendPropertyChanged("DB_Respondent");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_User_DB_Case", Storage="_DB_Cases", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<DB_Case> DB_Cases
		{
			get
			{
				return this._DB_Cases;
			}
			set
			{
				this._DB_Cases.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DB_Alerts(DB_Alert entity)
		{
			this.SendPropertyChanging();
			entity.DB_User = this;
		}
		
		private void detach_DB_Alerts(DB_Alert entity)
		{
			this.SendPropertyChanging();
			entity.DB_User = null;
		}
		
		private void attach_DB_Alerts1(DB_Alert entity)
		{
			this.SendPropertyChanging();
			entity.DB_User1 = this;
		}
		
		private void detach_DB_Alerts1(DB_Alert entity)
		{
			this.SendPropertyChanging();
			entity.DB_User1 = null;
		}
		
		private void attach_DB_Cases(DB_Case entity)
		{
			this.SendPropertyChanging();
			entity.DB_User = this;
		}
		
		private void detach_DB_Cases(DB_Case entity)
		{
			this.SendPropertyChanging();
			entity.DB_User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DB_Case")]
	public partial class DB_Case : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CaseID;
		
		private System.DateTime _Date;
		
		private string _ReposponseTime;
		
		private System.Nullable<System.DateTime> _ResolutionDate;
		
		private string _Description;
		
		private string _UserID;
		
		private int _HouseID;
		
		private string _RespondentID;
		
		private System.Nullable<int> _Type;
		
		private EntityRef<DB_House> _DB_House;
		
		private EntityRef<DB_Respondent> _DB_Respondent;
		
		private EntityRef<DB_User> _DB_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCaseIDChanging(int value);
    partial void OnCaseIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnReposponseTimeChanging(string value);
    partial void OnReposponseTimeChanged();
    partial void OnResolutionDateChanging(System.Nullable<System.DateTime> value);
    partial void OnResolutionDateChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnUserIDChanging(string value);
    partial void OnUserIDChanged();
    partial void OnHouseIDChanging(int value);
    partial void OnHouseIDChanged();
    partial void OnRespondentIDChanging(string value);
    partial void OnRespondentIDChanged();
    partial void OnTypeChanging(System.Nullable<int> value);
    partial void OnTypeChanged();
    #endregion
		
		public DB_Case()
		{
			this._DB_House = default(EntityRef<DB_House>);
			this._DB_Respondent = default(EntityRef<DB_Respondent>);
			this._DB_User = default(EntityRef<DB_User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CaseID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CaseID
		{
			get
			{
				return this._CaseID;
			}
			set
			{
				if ((this._CaseID != value))
				{
					this.OnCaseIDChanging(value);
					this.SendPropertyChanging();
					this._CaseID = value;
					this.SendPropertyChanged("CaseID");
					this.OnCaseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReposponseTime", DbType="VarChar(1)")]
		public string ReposponseTime
		{
			get
			{
				return this._ReposponseTime;
			}
			set
			{
				if ((this._ReposponseTime != value))
				{
					this.OnReposponseTimeChanging(value);
					this.SendPropertyChanging();
					this._ReposponseTime = value;
					this.SendPropertyChanged("ReposponseTime");
					this.OnReposponseTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResolutionDate", DbType="Date")]
		public System.Nullable<System.DateTime> ResolutionDate
		{
			get
			{
				return this._ResolutionDate;
			}
			set
			{
				if ((this._ResolutionDate != value))
				{
					this.OnResolutionDateChanging(value);
					this.SendPropertyChanging();
					this._ResolutionDate = value;
					this.SendPropertyChanged("ResolutionDate");
					this.OnResolutionDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="VarChar(25)")]
		public string UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._DB_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HouseID", DbType="Int NOT NULL")]
		public int HouseID
		{
			get
			{
				return this._HouseID;
			}
			set
			{
				if ((this._HouseID != value))
				{
					if (this._DB_House.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHouseIDChanging(value);
					this.SendPropertyChanging();
					this._HouseID = value;
					this.SendPropertyChanged("HouseID");
					this.OnHouseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RespondentID", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string RespondentID
		{
			get
			{
				return this._RespondentID;
			}
			set
			{
				if ((this._RespondentID != value))
				{
					if (this._DB_Respondent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRespondentIDChanging(value);
					this.SendPropertyChanging();
					this._RespondentID = value;
					this.SendPropertyChanged("RespondentID");
					this.OnRespondentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int")]
		public System.Nullable<int> Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_House_DB_Case", Storage="_DB_House", ThisKey="HouseID", OtherKey="HouseID", IsForeignKey=true)]
		public DB_House DB_House
		{
			get
			{
				return this._DB_House.Entity;
			}
			set
			{
				DB_House previousValue = this._DB_House.Entity;
				if (((previousValue != value) 
							|| (this._DB_House.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DB_House.Entity = null;
						previousValue.DB_Cases.Remove(this);
					}
					this._DB_House.Entity = value;
					if ((value != null))
					{
						value.DB_Cases.Add(this);
						this._HouseID = value.HouseID;
					}
					else
					{
						this._HouseID = default(int);
					}
					this.SendPropertyChanged("DB_House");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_Respondent_DB_Case", Storage="_DB_Respondent", ThisKey="RespondentID", OtherKey="ID", IsForeignKey=true)]
		public DB_Respondent DB_Respondent
		{
			get
			{
				return this._DB_Respondent.Entity;
			}
			set
			{
				DB_Respondent previousValue = this._DB_Respondent.Entity;
				if (((previousValue != value) 
							|| (this._DB_Respondent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DB_Respondent.Entity = null;
						previousValue.DB_Cases.Remove(this);
					}
					this._DB_Respondent.Entity = value;
					if ((value != null))
					{
						value.DB_Cases.Add(this);
						this._RespondentID = value.ID;
					}
					else
					{
						this._RespondentID = default(string);
					}
					this.SendPropertyChanged("DB_Respondent");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_User_DB_Case", Storage="_DB_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public DB_User DB_User
		{
			get
			{
				return this._DB_User.Entity;
			}
			set
			{
				DB_User previousValue = this._DB_User.Entity;
				if (((previousValue != value) 
							|| (this._DB_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DB_User.Entity = null;
						previousValue.DB_Cases.Remove(this);
					}
					this._DB_User.Entity = value;
					if ((value != null))
					{
						value.DB_Cases.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(string);
					}
					this.SendPropertyChanged("DB_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
